[users]
#隐式角色，不需要指定角色和权限的关系，格式为user=password,role1,role2...
#admin=123456,administrator,engineer
#songxiong=123,engineer

#[roles]角色标识，必须指定
[roles]
#显示角色，需要指定角色和权限的关系，最佳的格式为role=permission01(module02:action01),permission02(module01:action01)
#administrator=appModule:addApp,appModule:delApp,appModule:qryApp,fileModule:addFile
#engineer=appModule:qryApp,fileModule:addFile

#[main]标识，核心配置必须指定
[main]
#指定授权器
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
#指定通配符权限解析器，并将其绑定到授权器上
permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
authorizer.permissionResolver=$permissionResolver
#指定角色权限解析器，作用是映射角色和权限之间的关系
rolePermissionResolver=com.palmshe.test.resolver.PalmsheRolePermissonResolver
authorizer.rolePermissionResolver=$rolePermissionResolver
#将授权器绑定到SecurityManager上
securityManager.authorizer=$authorizer
#定义数据源
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.password=root
dataSource.username=root
dataSource.url=jdbc:mysql://localhost:3306/shiro
#申明Realm，指定到默认JdbcRealm
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
#将数据源绑定到jdbcRealm
jdbcRealm.dataSource=$dataSource
#jdbcRealm需要开启权限查询
jdbcRealm.permissionsLookupEnabled=true
#将所有的Realm绑定到SecurityManager中，如果没有显示绑定，
#则程序会自动检索自定的Realm，并按照定义顺序进行认证
#如果有显示绑定，那么只有显示绑定的Realm有效，并且按排列顺序进行认证
securityManager.realms=$jdbcRealm



